---
description:
globs:
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---

# Cursor Rules для Документации Проекта (Системная Аналитика)

## 0. Общие Принципы

*   **Цель документации:** Предоставить ясное, точное и полное описание системы для разработчиков (frontend и backend), тестировщиков и других заинтересованных сторон.
*   **Язык:** Вся документация ведется на **русском языке**. Термины, не имеющие устоявшегося русского аналога, пишутся на английском языке (например, `middleware`, `endpoint`, `payload`).
*   **Стиль:** Формальный, технический, но понятный. Избегай жаргона, если можно обойтись без него. Используй активный залог.
*   **Актуальность:** Документация должна отражать текущее состояние системы или планируемые изменения. Указывай версии, если применимо.
*   **Атомарность:** Старайся описывать каждую сущность или процесс в соответствующем разделе, избегая излишнего дублирования. Используй ссылки.

## 1. Структура Документа и Форматирование Markdown

*   **Основной заголовок файла (H1):** Название описываемого модуля, фичи или раздела системы.
    *   Пример: `# Аутентификация Пользователей`
*   **Заголовки разделов (H2, H3, H4):** Используй для логической структуризации.
    *   Пример: `## 1. Описание API`, `### 1.1. Эндпоинт POST /auth/login`
*   **Списки:**
    *   Используй маркированные списки  (`-`, `*`) для перечислений, не имеющих строгого порядка.
    *   Используй нумерованные списки (`1.`, `2.`) для шагов, инструкций или упорядоченных элементов.
*   **Выделение текста:**
    *   `**Жирный текст**` (или `__Жирный текст__`) для ключевых терминов при первом упоминании, важных акцентов.
    *   `*Курсив*` (или `_Курсив_`) для названий полей, параметров, менее значимых акцентов.
    *   `` `Моноширинный текст` `` для имен файлов, путей, названий переменных, фрагментов кода, команд, URL.
*   **Блоки кода:**
    *   Используй тройные обратные кавычки (```) с указанием языка для примеров JSON, SQL, JavaScript, Python и т.д.
    *   Пример:
        ```json
        {
          "username": "user@example.com",
          "password": "securepassword123"
        }
        ```
*   **Цитаты:** Используй `>` для выделения важных замечаний, предупреждений или цитат из других источников.
    *   Пример: `> **Важно:** Пароли должны храниться в хешированном виде.`
*   **Таблицы:** Используй для структурированного представления данных (например, описание полей DTO, параметров запроса).
    *   Пример:
        ```markdown
        | Поле        | Тип    | Описание                          | Обязательное | Пример        |
        |-------------|--------|-----------------------------------|--------------|---------------|
        | `userId`    | String | Идентификатор пользователя        | Да           | `uuid-v4-str` |
        | `email`     | String | Адрес электронной почты           | Да           | `test@test.com`|
        | `roles`     | Array  | Список ролей пользователя         | Нет          | `["ADMIN"]`   |
        ```
*   **Ссылки:**
    *   Внутренние ссылки (на другие разделы документации): `[Текст ссылки](mdc:путь/к/файлу.md#заголовок-раздела)`
    *   Внешние ссылки: `[Текст ссылки](mdc:URL)`
*   **Горизонтальные линии:** Используй `---` для визуального разделения крупных логических блоков, если это улучшает читаемость.

## 2. Содержание Разделов (Примеры)

### 2.1. Описание Функциональности / Пользовательские Истории (User Stories)

*   **Формат:** "Как <роль>, я хочу <действие>, чтобы <цель/выгода>."
*   **Критерии приемки (Acceptance Criteria):** Четкие, измеримые условия, при выполнении которых фича считается реализованной.
    *   Пример:
        ```markdown
        **User Story:** Как зарегистрированный пользователь, я хочу иметь возможность сбросить свой пароль, чтобы восстановить доступ к аккаунту, если я его забыл.

        **Acceptance Criteria:**
        1.  Пользователь может запросить сброс пароля, указав свой email.
        2.  Система проверяет наличие email в базе данных.
        3.  Если email найден, на него отправляется письмо со ссылкой для сброса пароля.
        4.  Ссылка для сброса пароля уникальна и имеет ограниченный срок действия (например, 1 час).
        5.  Перейдя по ссылке, пользователь может ввести и подтвердить новый пароль.
        6.  Новый пароль соответствует политикам безопасности (длина, символы).
        ```

### 2.2. Описание API (Backend)

*   Для каждого эндпоинта:
    *   **HTTP Метод и URL:** Например, `POST /api/v1/users`
    *   **Назначение:** Краткое описание, что делает эндпоинт.
    *   **Параметры запроса (Request):**
        *   Path параметры: описание, тип.
        *   Query параметры: описание, тип, обязательность, пример.
        *   Headers: необходимые заголовки (например, `Authorization`, `Content-Type`).
        *   Тело запроса (Request Body): структура (JSON, XML, form-data), описание полей (используй таблицы), пример.
    *   **Ответы (Responses):**
        *   Успешный ответ: Код состояния (200, 201, 204), описание, структура тела ответа (JSON, XML), пример.
        *   Ошибочные ответы: Коды состояния (400, 401, 403, 404, 500), описание, структура тела ответа, пример.
    *   **Пример использования (cURL, Postman Snippet):** (Опционально, но полезно)

    *   Пример для эндпоинта:
        ```markdown
        ### POST /api/v1/auth/login

        **Назначение:** Аутентификация пользователя и выдача JWT токена.

        **Request Body (`application/json`):**

        | Поле       | Тип    | Описание                  | Обязательное |
        |------------|--------|---------------------------|--------------|
        | `email`    | String | Email пользователя        | Да           |
        | `password` | String | Пароль пользователя       | Да           |

        **Пример Request Body:**
        ```json
        {
          "email": "user@example.com",
          "password": "password123"
        }
        ```

        **Responses:**

        *   **`200 OK` - Успешная аутентификация**
            ```json
            {
              "accessToken": "your.jwt.token",
              "refreshToken": "your.refresh.token",
              "expiresIn": 3600
            }
            ```
        *   **`400 Bad Request` - Некорректные данные запроса**
            ```json
            {
              "error": "Validation Error",
              "messages": ["Email is required", "Password is required"]
            }
            ```
        *   **`401 Unauthorized` - Неверные учетные данные**
            ```json
            {
              "error": "Invalid credentials"
            }
            ```
        ```

### 2.3. Описание Компонентов / Страниц (Frontend)

*   **Название компонента/страницы.**
*   **Назначение:** Что делает этот компонент/страница.
*   **Входные данные (Props / Inputs):** Описание, тип, обязательность, значение по умолчанию.
*   **Состояние (State):** Ключевые элементы состояния и их назначение.
*   **Пользовательские взаимодействия:** Какие действия может совершать пользователь.
*   **События / Выходные данные (Events / Outputs):** Какие события генерирует компонент.
*   **Связи с другими компонентами/сервисами:** Какие API вызывает, какие другие компоненты использует.
*   **Визуальное представление:** (Опционально) Ссылка на макеты в Figma/Zeplin или скриншот.

### 2.4. Описание Моделей Данных / Сущностей (Общее для Backend/Frontend)

*   **Название сущности.**
*   **Описание:** Назначение сущности в системе.
*   **Атрибуты/Поля:**
    *   Используй таблицу: `| Поле | Тип данных | Описание | Ограничения/Примечания | Обязательное |`
    *   Типы данных: `String`, `Integer`, `Boolean`, `Date`, `Array<String>`, `UUID`, ссылка на другую сущность.
    *   Для имен полей БД используй snake_case, но при упоминании этих полей в контрактах, коде, JSON и т.д. используй camelCase
*   **Связи с другими сущностями:** (например, один-ко-многим, многие-ко-многим).
*   **Пример объекта (JSON):**

    *   Пример:
        ```markdown
        ### Сущность: `Product` (Товар)

        **Описание:** Представляет товар в каталоге интернет-магазина.

        **Атрибуты:**

        | Поле          | Тип данных    | Описание                               | Ограничения/Примечания      | Обязательное |
        |---------------|---------------|----------------------------------------|-----------------------------|--------------|
        | `id`          | UUID          | Уникальный идентификатор товара        | Генерируется системой      | Да (PK)      |
        | `name`        | String        | Наименование товара                    | Макс. 255 символов          | Да           |
        | `description` | String        | Подробное описание товара              |                             | Нет          |
        | `price`       | Decimal(10,2) | Цена товара                            | Положительное число         | Да           |
        | `category_id`  | UUID          | Идентификатор категории (FK)           | Ссылка на `Category.id`   | Да           |
        | `created_at`   | Timestamp     | Дата и время создания записи           |                             | Да           |
        | `updated_at`   | Timestamp     | Дата и время последнего обновления     |                             | Да           |

        **Пример объекта:**
        ```json
        {
          "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
          "name": "Смартфон Model X",
          "description": "Новейший смартфон с улучшенной камерой и производительностью.",
          "price": "599.99",
          "categoryId": "f0e1d2c3-b4a5-6789-0123-456789abcdef",
          "createdAt": "2023-10-27T10:00:00Z",
          "updatedAt": "2023-10-27T10:00:00Z"
        }
        ```

### 2.5. Диаграммы и Схемы

*   Если возможно, используй Mermaid.js для встраивания диаграмм прямо в Markdown.
    *   `sequenceDiagram` для описания последовательности вызовов.
    *   `classDiagram` для моделей данных.
    *   `erDiagram` для схем баз данных.
    *   `flowchart` для бизнес-процессов.
*   Пример Mermaid:
    ```mermaid
    sequenceDiagram
        participant User
        participant Frontend
        participant Backend
        User->>Frontend: Запрос на вход (email, password)
        Frontend->>Backend: POST /auth/login (email, password)
        Backend-->>Frontend: JWT Token / Ошибка
        Frontend-->>User: Показать дашборд / Сообщение об ошибке
    ```
*   Если используешь внешние инструменты для диаграмм (draw.io, Lucidchart), предоставляй ссылки на них или вставляй изображения.

## 3. Что НЕ нужно делать

*   **Не пиши неформально или сленгом** (если это не цитата или специально оговоренный случай).
*   **Не делай предположений:** Если что-то неясно, лучше пометить это как `TODO:` или `[ВОПРОС]:` и уточнить.
*   **Не описывай детали реализации, которые могут часто меняться**, если это не критично для понимания (например, название конкретной приватной функции). Фокусируйся на контрактах и поведении.
*   **Не дублируй информацию без необходимости.** Лучше ссылайся на существующие разделы.

## 4. Использование этих правил с LLM (Cursor)

*   При генерации или редактировании документации, ссылайся на эти правила в своем промпте, например:
    *   `"Опиши API для создания заказа, следуя правилам из .cursor-rules.md"`
    *   `"Создай раздел для сущности 'Клиент' согласно правилам документирования моделей данных."`
    *   `"Проверь этот раздел документации на соответствие нашим гайдлайнам."`
*   Или используй `@rules` или аналогичную команду Cursor, если она доступна для такого типа файлов/контекста.